/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as protectedProtectedRouteImport } from './routes/(protected)/_protected'
import { Route as authAuthRouteImport } from './routes/(auth)/_auth'
import { Route as authAuthIndexRouteImport } from './routes/(auth)/_auth/index'
import { Route as protectedProtectedRoleIndexRouteImport } from './routes/(protected)/_protected/role/index'
import { Route as protectedProtectedProfileIndexRouteImport } from './routes/(protected)/_protected/profile/index'
import { Route as protectedProtectedPermissionIndexRouteImport } from './routes/(protected)/_protected/permission/index'
import { Route as protectedProtectedDashboardIndexRouteImport } from './routes/(protected)/_protected/dashboard/index'
import { Route as protectedProtectedRoleEditRouteImport } from './routes/(protected)/_protected/role/edit'
import { Route as protectedProtectedRoleAddRouteImport } from './routes/(protected)/_protected/role/add'
import { Route as protectedProtectedPermissionEditRouteImport } from './routes/(protected)/_protected/permission/edit'
import { Route as protectedProtectedPermissionAddRouteImport } from './routes/(protected)/_protected/permission/add'

const protectedRouteImport = createFileRoute('/(protected)')()
const authRouteImport = createFileRoute('/(auth)')()

const protectedRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedProtectedRoute = protectedProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => protectedRoute,
} as any)
const authAuthRoute = authAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)
const authAuthIndexRoute = authAuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authAuthRoute,
} as any)
const protectedProtectedRoleIndexRoute =
  protectedProtectedRoleIndexRouteImport.update({
    id: '/role/',
    path: '/role/',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedProfileIndexRoute =
  protectedProtectedProfileIndexRouteImport.update({
    id: '/profile/',
    path: '/profile/',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedPermissionIndexRoute =
  protectedProtectedPermissionIndexRouteImport.update({
    id: '/permission/',
    path: '/permission/',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedDashboardIndexRoute =
  protectedProtectedDashboardIndexRouteImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedRoleEditRoute =
  protectedProtectedRoleEditRouteImport.update({
    id: '/role/edit',
    path: '/role/edit',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedRoleAddRoute =
  protectedProtectedRoleAddRouteImport.update({
    id: '/role/add',
    path: '/role/add',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedPermissionEditRoute =
  protectedProtectedPermissionEditRouteImport.update({
    id: '/permission/edit',
    path: '/permission/edit',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedPermissionAddRoute =
  protectedProtectedPermissionAddRouteImport.update({
    id: '/permission/add',
    path: '/permission/add',
    getParentRoute: () => protectedProtectedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof authAuthIndexRoute
  '/permission/add': typeof protectedProtectedPermissionAddRoute
  '/permission/edit': typeof protectedProtectedPermissionEditRoute
  '/role/add': typeof protectedProtectedRoleAddRoute
  '/role/edit': typeof protectedProtectedRoleEditRoute
  '/dashboard': typeof protectedProtectedDashboardIndexRoute
  '/permission': typeof protectedProtectedPermissionIndexRoute
  '/profile': typeof protectedProtectedProfileIndexRoute
  '/role': typeof protectedProtectedRoleIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authAuthIndexRoute
  '/permission/add': typeof protectedProtectedPermissionAddRoute
  '/permission/edit': typeof protectedProtectedPermissionEditRoute
  '/role/add': typeof protectedProtectedRoleAddRoute
  '/role/edit': typeof protectedProtectedRoleEditRoute
  '/dashboard': typeof protectedProtectedDashboardIndexRoute
  '/permission': typeof protectedProtectedPermissionIndexRoute
  '/profile': typeof protectedProtectedProfileIndexRoute
  '/role': typeof protectedProtectedRoleIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(protected)': typeof protectedRouteWithChildren
  '/(protected)/_protected': typeof protectedProtectedRouteWithChildren
  '/(auth)/_auth/': typeof authAuthIndexRoute
  '/(protected)/_protected/permission/add': typeof protectedProtectedPermissionAddRoute
  '/(protected)/_protected/permission/edit': typeof protectedProtectedPermissionEditRoute
  '/(protected)/_protected/role/add': typeof protectedProtectedRoleAddRoute
  '/(protected)/_protected/role/edit': typeof protectedProtectedRoleEditRoute
  '/(protected)/_protected/dashboard/': typeof protectedProtectedDashboardIndexRoute
  '/(protected)/_protected/permission/': typeof protectedProtectedPermissionIndexRoute
  '/(protected)/_protected/profile/': typeof protectedProtectedProfileIndexRoute
  '/(protected)/_protected/role/': typeof protectedProtectedRoleIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/permission/add'
    | '/permission/edit'
    | '/role/add'
    | '/role/edit'
    | '/dashboard'
    | '/permission'
    | '/profile'
    | '/role'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/permission/add'
    | '/permission/edit'
    | '/role/add'
    | '/role/edit'
    | '/dashboard'
    | '/permission'
    | '/profile'
    | '/role'
  id:
    | '__root__'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(protected)'
    | '/(protected)/_protected'
    | '/(auth)/_auth/'
    | '/(protected)/_protected/permission/add'
    | '/(protected)/_protected/permission/edit'
    | '/(protected)/_protected/role/add'
    | '/(protected)/_protected/role/edit'
    | '/(protected)/_protected/dashboard/'
    | '/(protected)/_protected/permission/'
    | '/(protected)/_protected/profile/'
    | '/(protected)/_protected/role/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRoute: typeof authRouteWithChildren
  protectedRoute: typeof protectedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/_protected': {
      id: '/(protected)/_protected'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedRouteImport
      parentRoute: typeof protectedRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthRouteImport
      parentRoute: typeof authRoute
    }
    '/(auth)/_auth/': {
      id: '/(auth)/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthIndexRouteImport
      parentRoute: typeof authAuthRoute
    }
    '/(protected)/_protected/role/': {
      id: '/(protected)/_protected/role/'
      path: '/role'
      fullPath: '/role'
      preLoaderRoute: typeof protectedProtectedRoleIndexRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/profile/': {
      id: '/(protected)/_protected/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof protectedProtectedProfileIndexRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/permission/': {
      id: '/(protected)/_protected/permission/'
      path: '/permission'
      fullPath: '/permission'
      preLoaderRoute: typeof protectedProtectedPermissionIndexRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/dashboard/': {
      id: '/(protected)/_protected/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedProtectedDashboardIndexRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/role/edit': {
      id: '/(protected)/_protected/role/edit'
      path: '/role/edit'
      fullPath: '/role/edit'
      preLoaderRoute: typeof protectedProtectedRoleEditRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/role/add': {
      id: '/(protected)/_protected/role/add'
      path: '/role/add'
      fullPath: '/role/add'
      preLoaderRoute: typeof protectedProtectedRoleAddRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/permission/edit': {
      id: '/(protected)/_protected/permission/edit'
      path: '/permission/edit'
      fullPath: '/permission/edit'
      preLoaderRoute: typeof protectedProtectedPermissionEditRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/permission/add': {
      id: '/(protected)/_protected/permission/add'
      path: '/permission/add'
      fullPath: '/permission/add'
      preLoaderRoute: typeof protectedProtectedPermissionAddRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
  }
}

interface authAuthRouteChildren {
  authAuthIndexRoute: typeof authAuthIndexRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthIndexRoute: authAuthIndexRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface protectedProtectedRouteChildren {
  protectedProtectedPermissionAddRoute: typeof protectedProtectedPermissionAddRoute
  protectedProtectedPermissionEditRoute: typeof protectedProtectedPermissionEditRoute
  protectedProtectedRoleAddRoute: typeof protectedProtectedRoleAddRoute
  protectedProtectedRoleEditRoute: typeof protectedProtectedRoleEditRoute
  protectedProtectedDashboardIndexRoute: typeof protectedProtectedDashboardIndexRoute
  protectedProtectedPermissionIndexRoute: typeof protectedProtectedPermissionIndexRoute
  protectedProtectedProfileIndexRoute: typeof protectedProtectedProfileIndexRoute
  protectedProtectedRoleIndexRoute: typeof protectedProtectedRoleIndexRoute
}

const protectedProtectedRouteChildren: protectedProtectedRouteChildren = {
  protectedProtectedPermissionAddRoute: protectedProtectedPermissionAddRoute,
  protectedProtectedPermissionEditRoute: protectedProtectedPermissionEditRoute,
  protectedProtectedRoleAddRoute: protectedProtectedRoleAddRoute,
  protectedProtectedRoleEditRoute: protectedProtectedRoleEditRoute,
  protectedProtectedDashboardIndexRoute: protectedProtectedDashboardIndexRoute,
  protectedProtectedPermissionIndexRoute:
    protectedProtectedPermissionIndexRoute,
  protectedProtectedProfileIndexRoute: protectedProtectedProfileIndexRoute,
  protectedProtectedRoleIndexRoute: protectedProtectedRoleIndexRoute,
}

const protectedProtectedRouteWithChildren =
  protectedProtectedRoute._addFileChildren(protectedProtectedRouteChildren)

interface protectedRouteChildren {
  protectedProtectedRoute: typeof protectedProtectedRouteWithChildren
}

const protectedRouteChildren: protectedRouteChildren = {
  protectedProtectedRoute: protectedProtectedRouteWithChildren,
}

const protectedRouteWithChildren = protectedRoute._addFileChildren(
  protectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authRoute: authRouteWithChildren,
  protectedRoute: protectedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
