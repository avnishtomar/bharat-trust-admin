/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as protectedProtectedRouteImport } from './routes/(protected)/_protected'
import { Route as authAuthRouteImport } from './routes/(auth)/_auth'
import { Route as protectedProtectedProfileRouteImport } from './routes/(protected)/_protected/profile'
import { Route as protectedProtectedDashboardRouteImport } from './routes/(protected)/_protected/dashboard'
import { Route as authAuthSignupRouteImport } from './routes/(auth)/_auth/signup'
import { Route as authAuthLoginRouteImport } from './routes/(auth)/_auth/login'
import { Route as protectedProtectedinnerInnerRouteImport } from './routes/(protected)/_protected/(inner)/_inner'
import { Route as protectedProtectedinnerInnerTestRouteImport } from './routes/(protected)/_protected/(inner)/_inner/test'

const protectedRouteImport = createFileRoute('/(protected)')()
const authRouteImport = createFileRoute('/(auth)')()
const protectedProtectedinnerRouteImport = createFileRoute(
  '/(protected)/_protected/(inner)',
)()

const protectedRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedProtectedRoute = protectedProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => protectedRoute,
} as any)
const authAuthRoute = authAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)
const protectedProtectedinnerRoute = protectedProtectedinnerRouteImport.update({
  id: '/(inner)',
  getParentRoute: () => protectedProtectedRoute,
} as any)
const protectedProtectedProfileRoute =
  protectedProtectedProfileRouteImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedDashboardRoute =
  protectedProtectedDashboardRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const authAuthSignupRoute = authAuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authAuthRoute,
} as any)
const authAuthLoginRoute = authAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authAuthRoute,
} as any)
const protectedProtectedinnerInnerRoute =
  protectedProtectedinnerInnerRouteImport.update({
    id: '/_inner',
    getParentRoute: () => protectedProtectedinnerRoute,
  } as any)
const protectedProtectedinnerInnerTestRoute =
  protectedProtectedinnerInnerTestRouteImport.update({
    id: '/test',
    path: '/test',
    getParentRoute: () => protectedProtectedinnerInnerRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedProtectedinnerInnerRouteWithChildren
  '/login': typeof authAuthLoginRoute
  '/signup': typeof authAuthSignupRoute
  '/dashboard': typeof protectedProtectedDashboardRoute
  '/profile': typeof protectedProtectedProfileRoute
  '/test': typeof protectedProtectedinnerInnerTestRoute
}
export interface FileRoutesByTo {
  '/': typeof protectedProtectedinnerInnerRouteWithChildren
  '/login': typeof authAuthLoginRoute
  '/signup': typeof authAuthSignupRoute
  '/dashboard': typeof protectedProtectedDashboardRoute
  '/profile': typeof protectedProtectedProfileRoute
  '/test': typeof protectedProtectedinnerInnerTestRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(protected)': typeof protectedRouteWithChildren
  '/(protected)/_protected': typeof protectedProtectedRouteWithChildren
  '/(auth)/_auth/login': typeof authAuthLoginRoute
  '/(auth)/_auth/signup': typeof authAuthSignupRoute
  '/(protected)/_protected/dashboard': typeof protectedProtectedDashboardRoute
  '/(protected)/_protected/profile': typeof protectedProtectedProfileRoute
  '/(protected)/_protected/(inner)': typeof protectedProtectedinnerRouteWithChildren
  '/(protected)/_protected/(inner)/_inner': typeof protectedProtectedinnerInnerRouteWithChildren
  '/(protected)/_protected/(inner)/_inner/test': typeof protectedProtectedinnerInnerTestRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/signup' | '/dashboard' | '/profile' | '/test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/signup' | '/dashboard' | '/profile' | '/test'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(protected)'
    | '/(protected)/_protected'
    | '/(auth)/_auth/login'
    | '/(auth)/_auth/signup'
    | '/(protected)/_protected/dashboard'
    | '/(protected)/_protected/profile'
    | '/(protected)/_protected/(inner)'
    | '/(protected)/_protected/(inner)/_inner'
    | '/(protected)/_protected/(inner)/_inner/test'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRoute: typeof authRouteWithChildren
  protectedRoute: typeof protectedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/_protected': {
      id: '/(protected)/_protected'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedRouteImport
      parentRoute: typeof protectedRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthRouteImport
      parentRoute: typeof authRoute
    }
    '/(protected)/_protected/(inner)': {
      id: '/(protected)/_protected/(inner)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedinnerRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/profile': {
      id: '/(protected)/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof protectedProtectedProfileRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/dashboard': {
      id: '/(protected)/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedProtectedDashboardRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(auth)/_auth/signup': {
      id: '/(auth)/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authAuthSignupRouteImport
      parentRoute: typeof authAuthRoute
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginRouteImport
      parentRoute: typeof authAuthRoute
    }
    '/(protected)/_protected/(inner)/_inner': {
      id: '/(protected)/_protected/(inner)/_inner'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedinnerInnerRouteImport
      parentRoute: typeof protectedProtectedinnerRoute
    }
    '/(protected)/_protected/(inner)/_inner/test': {
      id: '/(protected)/_protected/(inner)/_inner/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof protectedProtectedinnerInnerTestRouteImport
      parentRoute: typeof protectedProtectedinnerInnerRoute
    }
  }
}

interface authAuthRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute
  authAuthSignupRoute: typeof authAuthSignupRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
  authAuthSignupRoute: authAuthSignupRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface protectedProtectedinnerInnerRouteChildren {
  protectedProtectedinnerInnerTestRoute: typeof protectedProtectedinnerInnerTestRoute
}

const protectedProtectedinnerInnerRouteChildren: protectedProtectedinnerInnerRouteChildren =
  {
    protectedProtectedinnerInnerTestRoute:
      protectedProtectedinnerInnerTestRoute,
  }

const protectedProtectedinnerInnerRouteWithChildren =
  protectedProtectedinnerInnerRoute._addFileChildren(
    protectedProtectedinnerInnerRouteChildren,
  )

interface protectedProtectedinnerRouteChildren {
  protectedProtectedinnerInnerRoute: typeof protectedProtectedinnerInnerRouteWithChildren
}

const protectedProtectedinnerRouteChildren: protectedProtectedinnerRouteChildren =
  {
    protectedProtectedinnerInnerRoute:
      protectedProtectedinnerInnerRouteWithChildren,
  }

const protectedProtectedinnerRouteWithChildren =
  protectedProtectedinnerRoute._addFileChildren(
    protectedProtectedinnerRouteChildren,
  )

interface protectedProtectedRouteChildren {
  protectedProtectedDashboardRoute: typeof protectedProtectedDashboardRoute
  protectedProtectedProfileRoute: typeof protectedProtectedProfileRoute
  protectedProtectedinnerRoute: typeof protectedProtectedinnerRouteWithChildren
}

const protectedProtectedRouteChildren: protectedProtectedRouteChildren = {
  protectedProtectedDashboardRoute: protectedProtectedDashboardRoute,
  protectedProtectedProfileRoute: protectedProtectedProfileRoute,
  protectedProtectedinnerRoute: protectedProtectedinnerRouteWithChildren,
}

const protectedProtectedRouteWithChildren =
  protectedProtectedRoute._addFileChildren(protectedProtectedRouteChildren)

interface protectedRouteChildren {
  protectedProtectedRoute: typeof protectedProtectedRouteWithChildren
}

const protectedRouteChildren: protectedRouteChildren = {
  protectedProtectedRoute: protectedProtectedRouteWithChildren,
}

const protectedRouteWithChildren = protectedRoute._addFileChildren(
  protectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRoute: authRouteWithChildren,
  protectedRoute: protectedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
